#!/usr/bin/env node
"use strict";

const debug = require('debug')('startup'),
      http  = require('http'),
      mongo = require('mongodb').MongoClient;

var server;

/**
 * Database connection
 */

mongo.connect(getDBAddress("global"), function (err, db) {
    if (!err) {
        console.log('Connected to global db');

        global.db = db;
        global.db.stats = db.collection('stats');
        global.db.moderators = db.collection('moderators');

        databaseConnected();
        connectGameDBs();
    }
    else {
        console.error("Could not connect to database: global");
        throw new Error("DatabaseConnectionException");
    }
});

var connectGameDBs = function () {
    var game = "siege";
    var dbAddr = getDBAddress(process.env.NODE_ENV === "development" ? game + "Dev" : game);

    mongo.connect(dbAddr, function (err, db) {
        if (!err) {
            console.log('Connected to ' + game);

            global.db[game] = db;
            global.db[game].strats = db.collection('strats');
            global.db[game].submissions = db.collection('submissions');

            databaseConnected();
        }
        else {
            console.error("Could not connect to database: " + game);
            throw new Error("DatabaseConnectionException");
        }
    });
};


var connectedDbAmt = 0;
var databaseConnected = function () {
    connectedDbAmt++;

    if (connectedDbAmt == 2) {
        startApp();
    }
};

var startApp = function () {
    /**
     * Module dependencies.
     */

    var app = require('../app');

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '80');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
};

function getDBAddress(database) {
    return "mongodb://{user}:{password}@{host}:{port}/{database}?authSource=global"
        .replace("{host}", process.env.DBHOST)
        .replace("{port}", process.env.DBPORT)
        .replace("{user}", process.env.DBUSER)
        .replace("{password}", process.env.DBPASS)
        .replace("{database}", database || "");
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
